name: Build, Test and Publish

on:
  workflow_dispatch:
  push:

jobs:
  test:
    strategy:
      matrix:
        java: [ 21 ]
        os: [ubuntu-latest,macos-latest]
    runs-on: ${{ matrix.os }}

    name: Run unit tests on ${{ matrix.os }} with Java ${{ matrix.java }}
    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'
      - name: Print java version
        run: mvn --version

      - name: Build and run unit tests
        run: mvn -f pom.xml clean test

      - name: Create coverage report
        run: mvn jacoco:report

      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report_${{ matrix.java }}_${{ matrix.os }}
          path: target/site/jacoco/*

  build-and-publish:
    runs-on: ubuntu-latest
    needs: test
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: 'maven'

      - name: Print java version
        run: mvn --version

      - name: Build project
        run: |
          mvn clean package -Dmaven.test.skip=true

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          latest_tag="${{ env.latest_tag }}"
          if [[ $latest_tag =~ ^v([0-9]+)$ ]]; then
            version_number=${BASH_REMATCH[1]}
            new_version_number=$((version_number + 1))
            new_version="v$new_version_number"
          else
          new_version="v1"  # Default to v1 if no valid tag is found
          fi
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Tag new version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/bandjournal:api-${{ env.new_version }}